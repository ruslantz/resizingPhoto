// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π
let currentDatabase = null;
let children = [];

let currentPhotos = [];
let currentIndex = 0;
let selectedChild = '';
let currentPreviewUrl = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    setupEventListeners();
    showStatus('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã', 'info');
});

function setupEventListeners() {
    // –í—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    document.querySelectorAll('.db-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const dbName = this.getAttribute('data-db');
            selectDatabase(dbName);
        });
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    const fileInput = document.getElementById('photoInput');
    fileInput.addEventListener('change', handleFileSelect);
}

function selectDatabase(dbName) {
    currentDatabase = dbName;
    children = databases[dbName];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    document.querySelectorAll('.db-btn').forEach(b => b.classList.remove('active'));
    document.querySelector(`.db-btn[data-db="${dbName}"]`).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–µ–π
    updateChildButtons();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    document.querySelector('.upload-section').style.display = 'block';
    document.getElementById('taggerSection').style.display = 'none';
    
    showStatus(`–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: ${getDatabaseDisplayName(dbName)}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ`, 'success');
}

function getDatabaseDisplayName(dbName) {
    const names = {
        'engineers': '–ò–Ω–∂–µ–Ω–µ—Ä—ã',
        'karate': '–ö–∞—Ä–∞—Ç–µ'
    };
    return names[dbName] || dbName;
}

function updateChildButtons() {
    const container = document.getElementById('childButtons');
    container.innerHTML = '';
    
    children.forEach(child => {
        const btn = document.createElement('button');
        btn.className = 'child-btn';
        btn.setAttribute('data-id', child.id);
        btn.textContent = child.name.split(' ')[1]; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
        btn.addEventListener('click', function() {
            selectedChild = this.getAttribute('data-id');
            document.querySelectorAll('.child-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            showStatus('–ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ"', 'info');
        });
        container.appendChild(btn);
    });
}

function handleFileSelect(event) {
    if (!currentDatabase) {
        showStatus('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', 'error');
        return;
    }
    
    const files = Array.from(event.target.files);
    if (files.length === 0) return;

    currentPhotos = files;
    currentIndex = 0;
    showTaggerSection();
    showCurrentPhoto();
}

function showTaggerSection() {
    document.getElementById('taggerSection').style.display = 'block';
    updateProgress();
    updatePhotoCounter();
}

async function showCurrentPhoto() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–≤—å—é
    if (currentPreviewUrl) {
        URL.revokeObjectURL(currentPreviewUrl);
        currentPreviewUrl = null;
    }
    
    if (currentIndex >= currentPhotos.length) {
        showStatus('üéâ –í—Å–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!', 'success');
        document.getElementById('saveBtn').style.display = 'none';
        document.getElementById('nextBtn').style.display = 'none';
        document.getElementById('skipBtn').style.display = 'none';
        return;
    }

    const file = currentPhotos[currentIndex];
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if (file.name.toLowerCase().endsWith('.heic') || file.type === 'image/heic') {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEIC –≤ JPEG –¥–ª—è –ø—Ä–µ–≤—å—é
            showStatus('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEIC...', 'info');
            const jpegBlob = await convertHeicToJpeg(file);
            currentPreviewUrl = URL.createObjectURL(jpegBlob);
            document.getElementById('photoPreview').src = currentPreviewUrl;
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            const dataUrl = await readFileAsDataURL(file);
            document.getElementById('photoPreview').src = dataUrl;
        }
        
        selectedChild = '';
        document.querySelectorAll('.child-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.getElementById('saveBtn').style.display = 'inline-block';
        document.getElementById('nextBtn').style.display = 'inline-block';
        document.getElementById('skipBtn').style.display = 'inline-block';
        
        showStatus(`–§–æ—Ç–æ ${currentIndex + 1} –∏–∑ ${currentPhotos.length}. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ"`, 'info');
        updatePhotoCounter();
        
    } catch (error) {
        console.error('Error showing photo:', error);
        showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', 'error');
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Ñ–æ—Ç–æ
        setTimeout(nextPhoto, 1000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫ DataURL —Å Promise
function readFileAsDataURL(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.onerror = (e) => reject(e);
        reader.readAsDataURL(file);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HEIC –≤ JPEG
async function convertHeicToJpeg(heicFile) {
    const arrayBuffer = await heicFile.arrayBuffer();
    const convertResult = await heicConvert({
        buffer: arrayBuffer,
        format: 'JPEG',
        quality: 0.8
    });
    return new Blob([convertResult], { type: 'image/jpeg' });
}

function savePhoto() {
    if (!selectedChild) {
        showStatus('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞', 'error');
        return;
    }

    const lessonNumber = document.getElementById('lessonNumber').value;
    const file = currentPhotos[currentIndex];
    const child = children.find(c => c.id === selectedChild);
    
    if (!child) {
        showStatus('–û—à–∏–±–∫–∞: —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    let extension = file.name.split('.').pop();
    let fileToSave = file;
    
    // –ï—Å–ª–∏ HEIC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    if (file.name.toLowerCase().endsWith('.heic') || file.type === 'image/heic') {
        try {
            fileToSave = convertHeicToJpeg(file);
            extension = 'jpg';
        } catch (error) {
            showStatus('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HEIC', 'error');
            return;
        }
    }
    
    const fileName = `${selectedChild}.${extension}`;
    
    try {
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const url = URL.createObjectURL(fileToSave);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        setTimeout(() => {
            URL.revokeObjectURL(url);
            showStatus(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${fileName}`, 'success');
        }, 100);
        
    } catch (error) {
        console.error('Save error:', error);
        showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
    }
}

function nextPhoto() {
    currentIndex++;
    updateProgress();
    updatePhotoCounter();
    showCurrentPhoto();
}

function skipPhoto() {
    showStatus('–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ', 'warning');
    nextPhoto();
}

function updateProgress() {
    const progress = (currentIndex / currentPhotos.length) * 100;
    document.getElementById('progressBar').style.width = progress + '%';
}

function updatePhotoCounter() {
    const counter = document.getElementById('photoCounter');
    if (counter) {
        counter.textContent = `${currentIndex + 1} / ${currentPhotos.length}`;
    }
}

function showStatus(message, type = '') {
    const statusDiv = document.getElementById('status');
    statusDiv.textContent = message;
    statusDiv.className = `status ${type}`;
}

function resetSession() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (currentPreviewUrl) {
        URL.revokeObjectURL(currentPreviewUrl);
        currentPreviewUrl = null;
    }
    
    currentPhotos = [];
    currentIndex = 0;
    selectedChild = '';
    
    document.getElementById('taggerSection').style.display = 'none';
    document.querySelector('.upload-section').style.display = 'block';
    document.getElementById('photoInput').value = '';
    document.getElementById('photoPreview').src = '';
    document.querySelectorAll('.child-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
    document.getElementById('saveBtn').style.display = 'inline-block';
    document.getElementById('nextBtn').style.display = 'inline-block';
    document.getElementById('skipBtn').style.display = 'inline-block';
    
    showStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã', 'info');
}
